pipeline {
    agent {
          node {
              label 'gsacsp-build02.reisys.com'
          }
    }

    triggers {
	  //Run at 4:00 AM everyday
      cron '00 4 * * 1-5'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        timeout(time: 2, unit: 'HOURS')
    }

    environment {
	    APP_NAME = "ppdms-ui"
	    SERVICE_IMAGE = "ppdms_ui"

	    SONAR_LOGIN = "117c177577f91af12b1d69691abd6403fda25b8c"
	    SONARQUBE_URL = "http://sonar.reisys.com"

	    DOCKER_REGISTRY="gsacsp-build02.reisys.com:5000/gsa"
	    CONTAINER_TAG="latest"
		CONTAINER_CONSTRAINTS="-m 1024M --memory-swap 1024M"
		SERVICE_PORTS="-p 250:8080"
		DEPLOYMENT_ENV="dev02"
	}

    stages {

    	stage('Initialize') {
          steps {
              script {

                  APPLICATION_BUILD_NAME = env.APP_NAME

                  BRANCH_NAME = env.BRANCH_NAME.replaceAll('origin/', '')

                  println("BRANCH_NAME:" + BRANCH_NAME)
                  if (BRANCH_NAME.startsWith('sprint-') || BRANCH_NAME.startsWith('uat-fixes') || BRANCH_NAME.startsWith('PPMS-') || BRANCH_NAME.startsWith('feature-') || BRANCH_NAME.startsWith('PPDMS-')) {
                      APP_VERSION = BRANCH_NAME.replaceAll('/', '')
                  }

                  APPLICATION_BUILD_NAME = "${APPLICATION_BUILD_NAME}-${APP_VERSION}"
                  println("APPLICATION_BUILD_NAME = " + APPLICATION_BUILD_NAME)

                  def author = sh script: "git show -s --pretty=\"%an <%ae>\" ${GIT_COMMIT}", returnStdout: true
                  println("Last Commit Author = " + author)

                  // print out all environments
                  sh 'printenv'
                  sh 'export NODE_OPTIONS="--max-old-space-size=8192"'
                  sh "node -v && npm -v"
                  notifySlack('STARTED', APPLICATION_BUILD_NAME + ' Job!' )
              }
          }


		}

		//Install Dependencies
    stage('Install Dependencies') {
        when {
          //changeset "package.json" &&
          expression {
            return (BRANCH_NAME.startsWith('sprint-') || BRANCH_NAME.startsWith('uat-fixes') || BRANCH_NAME.startsWith('PPMS-')|| BRANCH_NAME.startsWith('feature-') || BRANCH_NAME.startsWith('PPDMS-'))
          }
        }
        steps {
            sh 'npm install --prefer-offline'
        }
      }

    //Build Docker Image
		stage('Build Docker Image') {
			when {
				expression {
            return (BRANCH_NAME.startsWith('sprint-') || BRANCH_NAME.startsWith('uat-fixes') || BRANCH_NAME.startsWith('PPMS-')|| BRANCH_NAME.startsWith('feature-') || BRANCH_NAME.startsWith('PPDMS-'))
				}
			}
			steps {
        script {
          echo 'Building and Deploying to REI...'
          			sh 'npm cache clean --force'
          			sh 'npm run build'
          			sh "docker rmi ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:${CONTAINER_TAG} || true"
					sh "docker build --build-arg BUILD_NUMBER=${BUILD_NUMBER} -t ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:${CONTAINER_TAG} --pull=true ${WORKSPACE}"
					sh "docker push ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:${CONTAINER_TAG}"
				}
			}
		}

		//Deploy Docker Image
		stage ('Deploy Docker Image') {
		   agent {
          		node {
              		label 'gsaiae-dev02.reisys.com'
          		}
   		   }
			when {
				expression {
          return (BRANCH_NAME.startsWith('sprint-') || BRANCH_NAME.startsWith('uat-fixes') || BRANCH_NAME.startsWith('PPMS-')|| BRANCH_NAME.startsWith('feature-') || BRANCH_NAME.startsWith('PPDMS-'))
				}
			}
			steps {
			    script {
			        SERVICE_ENV = "-e VIRTUAL_HOST=gsa${APP_NAME}-${DEPLOYMENT_ENV}.reisys.com"

					sh "docker pull ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:${CONTAINER_TAG}"
					sh "docker stop ${APP_NAME} || true"
					sh "docker rm -f ${APP_NAME} || true"
					sh "docker run -d --restart=always ${CONTAINER_CONSTRAINTS} ${SERVICE_PORTS} ${SERVICE_ENV} --name ${APP_NAME} ${DOCKER_REGISTRY}/${SERVICE_IMAGE}:${CONTAINER_TAG}"
			    }
			}
		}
    }
    post {
        success {
        	echo 'API Deployed successfully'
        	notifySlack('SUCCESS', APPLICATION_BUILD_NAME + ' Deployed successfully!')
        }
        failure {
            echo 'This will run only if failed'
            notifySlack('FAILURE', APPLICATION_BUILD_NAME + ' Failed!')
        }
    }
}


def notifySlack(String buildStatus = 'STARTED', additionalMessage = null) {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}\n${additionalMessage}"

    slackSend(color: color, message: msg, channel: '#jenkins', baseUrl: 'https://reigsappms.slack.com/services/hooks/jenkins-ci' ,tokenCredentialId: 'gsappms-slack', teamDomain: 'reigsappms')
}
